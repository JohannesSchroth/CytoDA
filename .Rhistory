summarise(MeanSignal = mean(Signal_back)) %>%
ungroup()
df %>%
mutate(Signal_back = Signal - Bkgnd.) %>%
group_by(Timepoint, Name) %>%
summarise(MeanSignal = mean(Signal_back)) %>%
mutate(StdSignal = MeanSignal - .[.$Name == POS_CTRL, MeanSignal])
std_df <- df %>%
mutate(Signal_back = Signal - Bkgnd.) %>%
group_by(Timepoint, Name) %>%
summarise(MeanSignal = mean(Signal_back))
std_df
std_df %>%
mutate(StdSignal = MeanSignal - .[.$Name == 'POS_CTRL', MeanSignal])
std_df %>%
mutate(StdSignal = MeanSignal - .[.$Name == 'POS_CTRL', 'MeanSignal'])
std_df %>%
group_by(Timepoint) %>%
mutate(StdSignal = MeanSignal - .[.$Name == 'POS_CTRL', 'MeanSignal'])
std_df <- df %>%
mutate(Signal_back = Signal - Bkgnd.) %>%
group_by(Timepoint, Name) %>%
summarise(MeanSignal = mean(Signal_back)) %>%
ungroup() %>%
spread('Timepoint', 'MeanSignal')
std_df
std_df[std_df$Name == 'POS_CTRL', 'preop']
preop_ctrl <- std_df[std_df$Name == 'POS_CTRL', 'preop']
postop_ctrl <- std_df[std_df$Name == 'POS_CTRL', 'postop']
std_df %>%
mutate(std_preop = preop / preop_ctrl)
std_df %>%
mutate(std_preop == preop / preop_ctrl)
preop_ctrl <- as.numeric(std_df[std_df$Name == 'POS_CTRL', 'preop'])
preop_ctrl
std_df %>%
mutate(std_preop = preop / preop_ctrl)
postop_ctrl <- as.numeric(std_df[std_df$Name == 'POS_CTRL', 'postop'])
std_df %>%
mutate(std_preop = preop / preop_ctrl) %>%
mutate(std_postop = postop / postop_ctrl)
std_df %>%
mutate(std_preop = preop * preop_ctrl / preop_ctrl) %>%
mutate(std_postop = postop * preop_ctrl / postop_ctrl)
std_df <- std_df %>%
mutate(std_preop = preop * preop_ctrl / preop_ctrl) %>%
mutate(std_postop = postop * preop_ctrl / postop_ctrl)
write.csv(std_df,
'Dropbox/PhD/01 Data/Antibody Arrays/PerioperativeSerum_Arrays/26112020_EDOS008_periop_serum/26112020_EDOS008/AtherosclerosisArray_standardised.csv')
read.table('Downloads/SraRunTable.txt')
read.table('~/Downloads/SraRunTable.txt')
read.csv('~/Downloads/SraRunTable.txt')
df <- read.csv('~/Downloads/SraRunTable.txt')
write.csv(df, 'Desktop/GSE104423.csv')
n <- 10^8
n1 <- sample(1:6, n, replace = T)
n2 <- sample(1:6, n, replace = T)
df <- data.frame('density' = n1 + n2)
head(df)
library(ggplot2)
ggplot(df, aes(x = density)) +
geom_bar() +
xlim(0,12)
ggplot(df, aes(x = density)) +
geom_bar() +
xlim(0,12) +
xlab(0:12)
n <- 10^6
n1 <- sample(1:6, n, replace = T)
n2 <- sample(1:6, n, replace = T)
df <- data.frame('density' = n1 + n2)
head(df)
library(ggplot2)
ggplot(df, aes(x = density)) +
geom_bar() +
xlab(0:12)
table(df)
table(n1+n2)
df <- table(n1+n2)
t(df)
df
t(df)
t(t(df))
ggplot(t(t(df))) +
geom_bar() +
xlab(0:12)
head(df)
df
n <- 10^8
n1 <- sample(1:6, n, replace = T)
n2 <- sample(1:6, n, replace = T)
df <- table(n1+n2)
df
df/10^8
sum(df/10^8)
df <- table(n1+n2)/10^8
df
ggplot(aes(x = colnames(df), y = df[1,])) +
geom_bar(stat = 'identity') +
xlab(0:12)
ggplot(aes(x = colnames(df), aes(y = df[1,]))) +
geom_bar(stat = 'identity') +
xlab(0:12)
ggplot(df, aes(x = colnames(df), y = df[1,])) +
geom_bar(stat = 'identity') +
xlab(0:12)
df <- data.frame(table(n1+n2)/10^8)
df
ggplot(df, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
xlab(0:12)
ggplot(df, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity')
ggplot(df, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
geom_line()
ggplot(df, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
geom_abline()
ggplot(df, aes(x = Var1, y = Freq)) +
geom_density(stat = 'identity')
ggplot(df, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity')
n3 <- c(7,7,22,20,22,31,26,27,25,18,7)
n3/sum(n3)
n3 <- n3/sum(n3)
df <- data.frame(table(n1+n2)/10^8, n3)
df
library(ggplot2)
df %>%
gather()
library(tidyverse)
df %>%
gather()
df
df %>%
gather(key = Var1)
df %>%
gather(key = 'key', value = 'value', -Var1)
df <- df %>%
gather(key = 'key', value = 'value', -Var1)
ggplot(df, aes(x = Var1, y = value)) +
geom_bar(stat = 'identity') +
facet_grid(~key)
ggplot(df, aes(x = Var1, y = value, fill = key)) +
geom_bar(stat = 'identity')
ggplot(df, aes(x = Var1, y = value, fill = key)) +
geom_bar(stat = 'identity', position = position_dodge2())
library(tidyverse)
n <- 10^8
n1 <- sample(1:6, n, replace = T)
n2 <- sample(1:6, n, replace = T)
n3 <- c(7,7,22,20,22,31,26,27,25,18,7)
n3 <- n3/sum(n3)
df
df <- data.frame(table(n1+n2)/10^8, n3)
df <- df %>%
gather(key = 'key', value = 'value', -Var1)
library(ggplot2)
ggplot(df, aes(x = Var1, y = value, fill = key)) +
geom_bar(stat = 'identity', position = position_dodge2())
df <- read.table('~Downloads/yeast_deletome.txt')
df <- read.table('~/Downloads/yeast_deletome.txt')
df
readLines('http://deleteome.holstegelab.nl/')
df <- readRDS("~/Downloads/yeast_del_strain_monocle3_cds.RDS")
head(df)
cds = detect_genes(cds)
cds <- readRDS("~/Downloads/yeast_del_strain_monocle3_cds.RDS")
cds = detect_genes(cds)
cds = preprocess_cds(cds, num_dim = 100, norm_method = "log")
cds = reduce_dimension(cds,
preprocess_method = "PCA",
reduction_method = "UMAP",
max_components = 2,
umap.min_dist = 0.05,
umap.n_neighbors = 10L,
umap.metric = "cosine")
cds = cluster_cells(cds, resolution = 1e-4, k = 3)
# plot strain umap
plot_cells(cds, color_cells_by = "cluster_50",
cell_size = 0.75,
label_groups_by_cluster = F,
label_cell_groups = T,
group_label_size = 4)
# plot functional groups
plot_cells(cds, color_cells_by = "cluster",
label_cell_groups = F,
group_label_size = 4) +
theme(legend.position = "none") +
facet_wrap(~kemmeren_functional_group)
# plot functional groups
plot_cells(cds, color_cells_by = "cluster",
label_cell_groups = F,
group_label_size = 4) +
facet_wrap(~kemmeren_functional_group)
# plot functional groups
plot_cells(cds, color_cells_by = "cluster",
label_cell_groups = F,
group_label_size = 4)
# plot expression of specific genes
plot_cells(cds, genes = "YCH1",
cell_size = 0.75, norm_method = "size_only") +
scale_color_viridis_c()
# plot expression of specific genes
plot_cells(cds, genes = "YCH1",
cell_size = 0.75, norm_method = "size_only")
# plot expression of specific genes
plot_cells(cds, genes = "GZF3",
cell_size = 0.75, norm_method = "size_only")
# plot expression of specific genes
plot_cells(cds, genes = "GZF3",
cell_size = 0.75, norm_method = "size_only")
# extract large main cluster (clusters 1 - 10) and re-analyze
cds_sub = cds[,colData(cds)$cluster_50 == 3,]
cds_sub = detect_genes(cds_sub)
cds_sub = preprocess_cds(cds_sub, num_dim = 20, norm_method = "log")
cds_sub = reduce_dimension(cds_sub,
preprocess_method = "PCA",
reduction_method = "UMAP",
max_components = 2,
umap.min_dist = 0.05,
umap.n_neighbors = 10L,
umap.metric = "cosine")
cds_sub = cluster_cells(cds_sub, resolution = 1e-4, k = 3)
# plot UMAP with sub-cluster designations from paper
plot_cells(cds_sub, color_cells_by = "sub_cluster",
cell_size = 1,
label_groups_by_cluster = F,
label_cell_groups = T,
group_label_size = 4)
# plot specific gene expression
plot_cells(cds_sub, genes = "ATP8",
cell_size = 1.25, norm_method = "size_only") +
scale_color_viridis_c()
# plot specific gene expression
plot_cells(cds_sub, genes = "ATP8",
cell_size = 1.25, norm_method = "size_only")
library(GEOquery)
library(limma)
library(umap)
gset <- getGEO("GSE46333", GSEMatrix =TRUE, getGPL=FALSE)
library(GEOquery)
install.packages('GEOquery')
BiocManager::install("GEOquery")
library(GEOquery)
library(limma)
library(umap)
gset <- getGEO("GSE46333", GSEMatrix =TRUE, getGPL=FALSE)
gset
if (length(gset) > 1) idx <- grep("GPL14550", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
ex
ex <- Biobase::exprs(gset)
ex
# log2 transform
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
# box-and-whisker plot
dev.new(width=3+ncol(gset)/6, height=5)
par(mar=c(7,4,2,1))
title <- paste ("GSE46333", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
dev.off()
# box-and-whisker plot
dev.new(width=3+ncol(gset)/6, height=5)
par(mar=c(7,4,2,1))
title <- paste ("GSE46333", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
dev.off()
# box-and-whisker plot
dev.new(width=3+ncol(gset)/6, height=5)
par(mar=c(7,4,2,1))
title <- paste ("GSE46333", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
dev.off()
# expression value distribution plot
par(mar=c(4,4,2,1))
title <- paste ("GSE46333", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, main=title, legend=F)
# mean-variance trend
ex <- na.omit(ex) # eliminate rows with NAs
plotSA(lmFit(ex), main="Mean variance trend, GSE46333")
# UMAP plot (multi-dimensional scaling)
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 15, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=15", xlab="", ylab="", pch=20, cex=1.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
ex
read.table('~/Downloads/GPL18096_028004_D_GEO_20120411_incl_gencode16_annotation_columns.txt')
read.table('~/Downloads/GPL18096_028004_D_GEO_20120411_incl_gencode16_annotation_columns.txt', fill = T)
df <- read.table('~/Downloads/GPL18096_028004_D_GEO_20120411_incl_gencode16_annotation_columns.txt', fill = T)
head(df)
df <- read.table('~/Downloads/GPL18096-32248.txt', fill = T)
head(df)
df <- read.table('~/Downloads/GPL18096-32248.txt', fill = T, header = T)
df$SPOT_ID
df <- read.delim('~/Downloads/GPL18096-32248.txt', header = T)
df$SPOT_ID
df
df <- read.table('~/Downloads/GPL18096-32248.txt', header = T)
df
df <- read.table('~/Downloads/GPL18096-32248.txt', header = T, sep = ' ')
df <- read.table('~/Downloads/GPL18096-32248.txt', header = T, sep = '   ')
df <- read.table('~/Downloads/GPL18096-32248.txt', header = T, sep = '')
df <- read.table('~/Downloads/GPL18096-32248.txt', header = T, sep = '\t')
df <- read.table('~/Downloads/GPL18096-32248.txt', header = T, sep = '\t', fill = T)
df
df$ID
df$SPOT_ID
df$GENE_NAME
df$GENE_SYMBOL
'GATA3' %in% df$GENE_SYMBOL
'MYC' %in% df$GENE_SYMBOL
'gata' %in% df$GENE_SYMBOL
'GATA' %in% df$GENE_SYMBOL
'HDR' %in% df$GENE_SYMBOL
'HDR' %in% df
'GATA' %in% df
'GATA3' %in% df
'MYC' %in% df
head(df)
'MYC' %in% df$ENSEMBL_ID
df$ENSEMBL_ID
'ENSG00000107485' %in% df$ENSEMBL_ID
'00000107485' %in% df$ENSEMBL_ID
grep('00000107485', df$ENSEMBL_ID)
grep('00000107485', df$ENSEMBL_ID)
grep('00000419587', df$ENSEMBL_ID)
df$GO_ID
df$
grep('00000419587', df)
grep('00000419587', df)
grep('GATA', df)
grep('GATA', df$GENE_SYMBOL)
df[grep('GATA', df$GENE_SYMBOL),]
df$gencode16_ensembl_gene_name
df <- read.table('~/Downloads/GPL18096-32248.txt', header = T, sep = '\t', fill = T, as.is = T)
df[grep('GATA', df$GENE_SYMBOL),]
ex
rownames(ex)
rownames(ex) %in% df$SPOT_ID
match(rownames(ex), df$SPOT_ID)
df$gencode16_ensembl_gene_name[match(rownames(ex), df$SPOT_ID)]
df$gencode16_ensembl_gene_name[match(df$SPOT_ID, rownames(ex))]
match(df$SPOT_ID, rownames(ex))
rownames(ex) <- df$gencode16_ensembl_gene_name[match(df$SPOT_ID, rownames(ex))]
rownames(ex)[32]
rownames(df)[32]
rownames(ex)[32]
install.packages('rsconnect')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('Dropbox/GitHub/CytoDA/')
rsconnect::setAccountInfo(name='johannesschroth',
token='F0B8CCBCE590C82BD02FCD56B9ECA5DB',
secret='wcUiSN52fu+J/6ZEjih+r4bC4Oi6yWdTtTXXBPU1')
library(rsconnect)
rsconnect::deployApp('Dropbox/GitHub/CytoDA/')
options(repos = BiocManager::repositories())
setRepositories()
options("repos")
> options(repos = BiocInstaller::biocinstallRepos())
options(repos = BiocInstaller::biocinstallRepos())
install.packages(BiocInstaller)
install.packages('BiocInstaller')
options(repos = BiocManager::repositories())
library(rsconnect)
rsconnect::deployApp('Dropbox/GitHub/CytoDA/')
getOption("repos")
attr(,"RStudio")
rsconnect::deployApp('Dropbox/GitHub/CytoDA/')
rsconnect::appDependencies()
rsconnect::appDependencies('Dropbox/GitHub/CytoDA/')
BiocInstaller::biocinstallRepos()
biocLite("BiocInstaller")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocInstaller")
https://bioconductor.org/install
source("https://bioconductor.org/install")
biocLite("BiocInstaller")
BiocManager::repositories()
getOption("repos")
BiocManager::install("cytofkit")
library(cytofkit)
rsconnect::appDependencies('Dropbox/GitHub/CytoDA/')
rsconnect::deployApp('Dropbox/GitHub/CytoDA/')
file.edit(system.file("DESCRIPTION", package = "oompaBase"))
file.edit(system.file("DESCRIPTION", package = "oompaBase"))
file.edit(system.file("DESCRIPTION", package = "cytofkit"))
rsconnect::deployApp('Dropbox/GitHub/CytoDA/')
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
CytoDA::run_app()
# Data Import and formatting----
rm(list = ls())
set.seed(1234)
setwd('~/Dropbox/Shared Folders/i-EMRA paper/FACS files for tSNE')
packages <- c('cytofkit', 'openCyto', 'Rtsne', 'ggcyto', 'umap', 'gridExtra',
'FlowSOM', 'ConsensusClusterPlus', 'ggdendro', 'plotly', 'reshape2',
'plotly', 'cowplot', 'ggplot2', 'ggsci', 'ggpubr', 'destiny', 'Biobase',
'SingleCellExperiment', 'slingshot', 'monocle3', 'tidyverse')
lapply(packages, require, character.only = T)
data_fs <- read.flowSet(path = 'FCS files all/', pattern = '.fcs',column.pattern = 'B 530|V 610|V 780|YG 582|YG 780' )
colnames(data_fs) <- flowCore::parameters(data_fs[[1]])$desc
setwd('~/Dropbox/PhD/04 Publications/Primary Research/T2D iEMRA 2019/i-EMRA paper/FACS files for tSNE')
packages <- c('cytofkit', 'openCyto', 'Rtsne', 'ggcyto', 'umap', 'gridExtra',
'FlowSOM', 'ConsensusClusterPlus', 'ggdendro', 'plotly', 'reshape2',
'plotly', 'cowplot', 'ggplot2', 'ggsci', 'ggpubr', 'destiny', 'Biobase',
'SingleCellExperiment', 'slingshot', 'monocle3', 'tidyverse')
lapply(packages, require, character.only = T)
packages <- c('cytofkit2', 'openCyto', 'Rtsne', 'ggcyto', 'umap', 'gridExtra',
'FlowSOM', 'ConsensusClusterPlus', 'ggdendro', 'plotly', 'reshape2',
'plotly', 'cowplot', 'ggplot2', 'ggsci', 'ggpubr', 'destiny', 'Biobase',
'SingleCellExperiment', 'slingshot', 'monocle3', 'tidyverse')
lapply(packages, require, character.only = T)
data_fs <- read.flowSet(path = 'FCS files all/', pattern = '.fcs',column.pattern = 'B 530|V 610|V 780|YG 582|YG 780' )
data_fs <- read.flowSet(path = 'analysis all/Data/', pattern = '.fcs',column.pattern = 'B 530|V 610|V 780|YG 582|YG 780' )
write.FCS(data_fs, 'ShinyAppData.fcs')
data_ff <- MetaCyto::set2Frame(data_fs)
write.FCS(data_ff, 'ShinyAppData.fcs')
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
header <- dashboardHeader(
)
sidebar <- dashboardSidebar(
)
body <- dashboardBody(
box(title = "Test", width = 10, height = "500px",
plotlyOutput("plot",width = "400px", height = "400px")
)
)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
output$plot <- renderPlotly({
server <- function(input, output) {
output$plot <- renderPlotly({
p <- plot_ly()
p <- add_trace(p, x=a, y=b, z=c, mode="markers", type="scatter3d", marker = list(size = 5, color = 'rgba(0, 0, 0, 1)'))
p <- layout(p, scene = list(xaxis = list(title = "A",range = c(-2,2)), yaxis = list(title = "B",range = c(-2,2)), zaxis = list(title = "C",range = c(-2,2))))
p
})
}
shinyApp(ui, server)
})
}
shinyApp(ui, server)
box(title = "Test", width = 10, height = "500px",
plotlyOutput("plot",width = "400px", height = "400px")
)
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
