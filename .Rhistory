color = palette_light()[[2]], size = 5, hjust = 0) +
theme_tq() +
labs(title = "ACF: Sunspots",
subtitle = "Zoomed in on Lags 115 to 135")
df %>%
tidy_acf('close', lags = 115:135) %>%
ggplot(aes(lag, acf)) +
geom_vline(xintercept = 120, size = 3, color = palette_light()[[2]]) +
geom_segment(aes(xend = lag, yend = 0), color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]], size = 2) +
geom_label(aes(label = acf %>% round(2)), vjust = -1,
color = palette_light()[[1]]) +
annotate("text", label = "10 Year Mark", x = 121, y = 0.8,
color = palette_light()[[2]], size = 5, hjust = 0) +
theme_tq() +
labs(title = "ACF: Sunspots",
subtitle = "Zoomed in on Lags 115 to 135")
df %>%
ggplot(aes(date, close)) +
geom_line() +
geom_smooth(method = 'loess')
rolling_origin_resamples <- rolling_origin(
df,
initial    = 600,
assess     = 30,
cumulative = FALSE,
skip       = skip_span
)
rolling_origin_resamples <- rolling_origin(
df,
initial    = 600,
assess     = 30,
cumulative = FALSE,
skip       = 60
)
rolling_origin_resamples
plot_split <- function(split, expand_y_axis = TRUE, alpha = 1, size = 1, base_size = 14) {
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
test_tbl  <- testing(split) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = index) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
# Visualize
g <- data_manipulated %>%
ggplot(aes(x = index, y = value, color = key)) +
geom_line(size = size, alpha = alpha) +
theme_tq(base_size = base_size) +
scale_color_tq() +
labs(
title    = glue("Split: {split$id}"),
subtitle = glue("{train_time_summary$start} to {test_time_summary$end}"),
y = "", x = ""
) +
theme(legend.position = "none")
if (expand_y_axis) {
sun_spots_time_summary <- sun_spots %>%
tk_index() %>%
tk_get_timeseries_summary()
g <- g +
scale_x_date(limits = c(sun_spots_time_summary$start,
sun_spots_time_summary$end))
}
return(g)
}
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = TRUE) +
theme(legend.position = "bottom")
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
rolling_origin_resamples$splits[[1]]
# Manipulate data
train_tbl <- training(rolling_origin_resamples$splits[[1]]) %>%
add_column(key = "training")
test_tbl  <- testing(rolling_origin_resamples$splits[[1]]) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = index) %>%
mutate(key = fct_relevel(key, "training", "testing"))
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = date) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
# Visualize
g <- data_manipulated %>%
ggplot(aes(x = index, y = value, color = key)) +
geom_line(size = size, alpha = alpha) +
theme_tq(base_size = base_size) +
scale_color_tq() +
labs(
title    = glue("Split: {split$id}"),
subtitle = glue("{train_time_summary$start} to {test_time_summary$end}"),
y = "", x = ""
) +
theme(legend.position = "none")
plot_split <- function(split, expand_y_axis = TRUE, alpha = 1, size = 1, base_size = 14) {
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
test_tbl  <- testing(split) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = date) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
# Visualize
g <- data_manipulated %>%
ggplot(aes(x = index, y = value, color = key)) +
geom_line(size = size, alpha = alpha) +
theme_tq(base_size = base_size) +
scale_color_tq() +
labs(
title    = glue("Split: {split$id}"),
subtitle = glue("{train_time_summary$start} to {test_time_summary$end}"),
y = "", x = ""
) +
theme(legend.position = "none")
if (expand_y_axis) {
sun_spots_time_summary <- sun_spots %>%
tk_index() %>%
tk_get_timeseries_summary()
g <- g +
scale_x_date(limits = c(sun_spots_time_summary$start,
sun_spots_time_summary$end))
}
return(g)
}
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = TRUE) +
theme(legend.position = "bottom")
plot_split <- function(split, expand_y_axis = TRUE, alpha = 1, size = 1, base_size = 14) {
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
test_tbl  <- testing(split) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = date) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
# Visualize
g <- data_manipulated %>%
ggplot(aes(x = index, y = value, color = key)) +
geom_line(size = size, alpha = alpha) +
theme_tq(base_size = base_size) +
scale_color_tq() +
labs(
title    = glue("Split: {split$id}"),
subtitle = glue("{train_time_summary$start} to {test_time_summary$end}"),
y = "", x = ""
) +
theme(legend.position = "none")
if (expand_y_axis) {
sun_spots_time_summary <- df %>%
tk_index() %>%
tk_get_timeseries_summary()
g <- g +
scale_x_date(limits = c(sun_spots_time_summary$start,
sun_spots_time_summary$end))
}
return(g)
}
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = TRUE) +
theme(legend.position = "bottom")
plot_split <- function(split, expand_y_axis = TRUE, alpha = 1, size = 1, base_size = 14) {
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
test_tbl  <- testing(split) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = date) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
# Visualize
g <- data_manipulated %>%
ggplot(aes(x = index, y = close, color = key)) +
geom_line(size = size, alpha = alpha) +
theme_tq(base_size = base_size) +
scale_color_tq() +
labs(
title    = glue("Split: {split$id}"),
subtitle = glue("{train_time_summary$start} to {test_time_summary$end}"),
y = "", x = ""
) +
theme(legend.position = "none")
if (expand_y_axis) {
sun_spots_time_summary <- df %>%
tk_index() %>%
tk_get_timeseries_summary()
g <- g +
scale_x_date(limits = c(sun_spots_time_summary$start,
sun_spots_time_summary$end))
}
return(g)
}
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = TRUE) +
theme(legend.position = "bottom")
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = F) +
theme(legend.position = "bottom")
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = T) +
theme(legend.position = "bottom")
plot_split <- function(split, expand_y_axis = TRUE, alpha = 1, size = 1, base_size = 14) {
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
test_tbl  <- testing(split) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(date = date) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
# Visualize
g <- data_manipulated %>%
ggplot(aes(x = date, y = close, color = key)) +
geom_line(size = size, alpha = alpha) +
theme_tq(base_size = base_size) +
scale_color_tq() +
labs(
title    = glue("Split: {split$id}"),
subtitle = glue("{train_time_summary$start} to {test_time_summary$end}"),
y = "", x = ""
) +
theme(legend.position = "none")
if (expand_y_axis) {
sun_spots_time_summary <- df %>%
tk_index() %>%
tk_get_timeseries_summary()
g <- g +
scale_x_date(limits = c(sun_spots_time_summary$start,
sun_spots_time_summary$end))
}
return(g)
}
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = T) +
theme(legend.position = "bottom")
split <- rolling_origin_resamples$splits[[1]]
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
test_tbl  <- testing(split) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = date) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary
data_manipulated
plot_split <- function(split, expand_y_axis = TRUE, alpha = 1, size = 1, base_size = 14) {
# Manipulate data
train_tbl <- training(split) %>%
add_column(key = "training")
test_tbl  <- testing(split) %>%
add_column(key = "testing")
data_manipulated <- bind_rows(train_tbl, test_tbl) %>%
as_tbl_time(index = date) %>%
mutate(key = fct_relevel(key, "training", "testing"))
# Collect attributes
train_time_summary <- train_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
test_time_summary <- test_tbl %>%
tk_index() %>%
tk_get_timeseries_summary()
data_manipulated
# Visualize
g <- data_manipulated %>%
ggplot(aes(x = date, y = close, color = key)) +
geom_line(size = size, alpha = alpha) +
theme_tq(base_size = base_size) +
scale_color_tq() +
labs(
title    = glue("Split: {split$id}"),
subtitle = glue("{train_time_summary$start} to {test_time_summary$end}"),
y = "", x = ""
) +
theme(legend.position = "none")
if (expand_y_axis) {
sun_spots_time_summary <- df %>%
tk_index() %>%
tk_get_timeseries_summary()
g <- g +
scale_x_date(limits = c(sun_spots_time_summary$start,
sun_spots_time_summary$end))
}
return(g)
}
rolling_origin_resamples$splits[[1]] %>%
plot_split(expand_y_axis = T) +
theme(legend.position = "bottom")
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
paste('umap data',Sys.Date(), ".csv", sep = "")
paste('umap_data_',Sys.Date(), ".csv", sep = "")
runApp()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
ui <- function(request) {
fluidPage(
sidebarPanel(
sliderInput("n", "Value to add", min = 0, max = 100, value = 50),
actionButton("add", "Add"), br(), br(),
bookmarkButton()
),
mainPanel(
h4("Sum of all previous slider values:", textOutput("sum"))
)
)
}
server <- function(input, output, session) {
vals <- reactiveValues(sum = 0)
# Save extra values in state$values when we bookmark
onBookmark(function(state) {
state$values$currentSum <- vals$sum
})
# Read values from state$values when we restore
onRestore(function(state) {
vals$sum <- state$values$currentSum
})
# Exclude the add button from bookmarking
setBookmarkExclude("add")
observeEvent(input$add, {
vals$sum <- vals$sum + input$n
})
output$sum <- renderText({
vals$sum
})
}
shinyApp(ui, server, enableBookmarking = "url")
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
#' Launch the ShinyApp
setwd('~/Dropbox/Projects/GitHub/CytoDA/')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
enableBookmarking(store = "url")
CytoDA::run_app()
