sant['Category'] <- NA
df <- rbind(revo, sant)
df
regexpr('../../....','12/12/1312')
grep('../../....','12/12/1312')
grepl('../../....','12/12/1312')
sant %>%
mutate(Date=as.Date(Date, format = "%d.%m.%Y"))
sant %>%
mutate(Date=as.Date(Date, format = "%d/%m/%Y"))
df %>%
mutate(Date=as.Date(Date, format = "%d/%m/%Y"))
head(df)
revo %>%
mutate(Date=as.Date(Date, format = "%d/%m/%Y"))
revo %>%
mutate(Date=as.Date(Date, format = "%d/%m"))
revo <- revo %>%
mutate(Date=as.Date(Date, format = "%d/%m"))
sant <- sant %>%
mutate(Date=as.Date(Date, format = "%d/%m/%Y"))
df <- rbind(revo, sant)
head(df)
unique(df$Category)
tail(df)
head(df)
is.na(df)
tail(df)
unique(df$Category)
df %>%
arrange(date)
df %>%
arrange(Date)
table(df$Description)
unique(df$Category)
df
cat <- read.csv('~/Desktop/Categories.csv')
cat
grepl(cat$Des, df$Description)
apply(grepl(cat$Des, df$Description))
vapply(grepl(cat$Des, df$Description))
vapply(cat$Des, grepl, df$Description)
vapply(X = cat$Des, grepl, df$Description)
grepl(cat$Des[1],df$Description )
head(df)
grep(cat$Des[1],df$Description)
grep(cat$Des[1],df$Description, value = TRUE)
df[grep(cat$Des[1],df$Description),5]
df
length(df)
length(df[,1])
for (i in 1:length(df[,1])) {
df[grep(cat$Des[i],df$Description),5] <- cat[i,2]
}
df
df[grep(cat$Des[i],df$Description, ignore.case = T),5]
df[grep(cat$Des[1],df$Description, ignore.case = T),5]
df[grep(cat$Des[2],df$Description, ignore.case = T),5]
df[grep(cat$Des[3],df$Description, ignore.case = T),5]
df[grep(cat$Des[4],df$Description, ignore.case = T),5]
df[grep(cat$Des[5],df$Description, ignore.case = T),5]
df[grep(cat$Des[6],df$Description, ignore.case = T),5]
for (i in 1:length(df[,1])) {
df[grep(cat$Des[i],df$Description, ignore.case = T),5] <- cat[i,2]
}
warnings()
str(cat)
cat <- read.csv('~/Desktop/Categories.csv', colClasses = c('character'))
cat
str(cat)
cat <- read.csv('~/Desktop/Categories.csv', colClasses = 'character')
cat
head(df)
str(cat)
length(df[,1])
for (i in 1:length(df[,1])) {
df[grep(cat$Des[i],df$Description, ignore.case = T),5] <- cat[i,2]
}
df
for (i in 1:length(df[,1])) {
df[grep(cat[i,1], df$Description, ignore.case = T),5] <- cat[i,2]
}
cat[,2]
for (i in 1:length(cat[,1])) {
df[grep(cat[i,1], df$Description, ignore.case = T),5] <- cat[i,2]
}
cat <- read.csv('~/Desktop/Categories.csv', colClasses = 'character')
for (i in 1:length(cat[,1])) {
df[grep(cat[i,1], df$Description, ignore.case = T),5] <- cat[i,2]
}
df
df[grep(cat[1,1], df$Description, ignore.case = T),5]
df[grep(cat[20,1], df$Description, ignore.case = T),5]
cat[20,2]
df[grep(cat[16,1], df$Description, ignore.case = T),5]
df[grep(cat[16,1], df$Description, ignore.case = T, value = T),5]
df[grep(cat[16,1], df$Description, ignore.case = T, value = F),5]
df[grepl(cat[16,1], df$Description, ignore.case = T, value = T),5]
df[grepl(cat[16,1], df$Description, ignore.case = T),5]
df[grep(cat[16,1], df$Description, ignore.case = T),5]
grep(cat[16,1], df$Description, ignore.case = T)
df[grep(cat[16,1], df$Description, ignore.case = T),}
cat[20,2]
df
df[grep(cat$Des[6],df$Description, ignore.case = T),5]
table(df$Description)
df
unique(df$Category)
is.na(df)
df[grep(cat[16,1], df$Description, ignore.case = T),]
cat[16,2]
for (i in 1:length(cat[,1])) {
df[grep(cat[i,1], df$Description, ignore.case = T),5] <- cat[i,2]
}
warnings()
str(df)
df$Category <- as.character(df$Category)
for (i in 1:length(cat[,1])) {
df[grep(cat[i,1], df$Description, ignore.case = T),5] <- cat[i,2]
}
df
df %>%
arrange(Date)
df <- df %>%
arrange(Date)
df
df %>% group_by(month=floor_date(Date, "month"))
install.packages('lubridate')
install.packages("lubridate")
df %>% group_by(month=floor_date(Date, "month"))
library(lubridate)
df %>% group_by(month=floor_date(Date, "month"))
df %>% group_by(month = floor_date(Date, "month"))
floor_date(df$Date, 'month')
df %>% mutate(month = format(Date, "%m"), year = format(Date, "%Y"))
df %>% mutate(month = format(Date, "%m"), year = format(Date, "%Y")) %>%
ggplot(aes(month, Out, colour = Category)) +geom_point()
df <- df %>% mutate(month = format(Date, "%m"), year = format(Date, "%Y"))
ggplot(df, aes(month, Out, colour = Category)) +
geom_point()
p <- ggplot(df, aes(month, Out, colour = Category)) +
geom_point()
print(p)
dev.off()
plot(rnorm(50), rnorm(50))
ggplot(df, aes(month, Out, colour = Category)) +
geom_point()
ggplot(df, aes(month, Out, colour = Category)) +
geom_line()
str(df)
df$Out <- as.numeric(df$Out)
ggplot(df, aes(month, Out, colour = Category)) +
geom_line()
ggplot(df, aes(month, Out, colour = Category)) +
geom_abline()
ggplot(df, aes(month, Out, colour = Category)) +
geom_point()
ggplot(df, aes(month, Out, colour = Category)) +
geom_smooth()
ggplot(df, aes(month, Out, colour = Category)) +
geom_point() +
geom_line()
source('~/.active-rstudio-document')
library(doParallel)
detectCores()
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
result <- foreach(i=10:10000) %dopar% getPrimeNumbers(i)
getPrimeNumbers <- function(n) {
n <- as.integer(n)
if(n > 1e6) stop("n too large")
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- 2L
for(i in last.prime:floor(sqrt(n)))
{
primes[seq.int(2L*last.prime, n, last.prime)] <- FALSE
last.prime <- last.prime + min(which(primes[(last.prime+1):n]))
}
which(primes)
}
result <- c()
index <- 10:100000
Sys.time(
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
} )
Sys.time()
s <- Sys.time()
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
}
e <- Sys.time()
result <- c()
index <- 10:10000
s <- Sys.time()
s <- Sys.time()
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
}
e <- Sys.time()
s <- Sys.time()
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
print(i)
}
e <- Sys.time()
s-e
e-s
a <- e-s
detectCores()
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
s <- Sys.time()
result <- foreach(i=10:10000) %dopar% getPrimeNumbers(i)
e <- Sys.time()
e-s
stopCluster(cl)
detectCores(logical = F)
detectCores(logical = T)
ls()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
data %>%
group_by(Merged_Clusters) %>%
summarise_if(is.numeric(), median)
data %>%
group_by(Merged) %>%
summarise_if(is.numeric(), median)
df %>%
group_by(Merged) %>%
summarise_if(is.numeric(), median)
df
raw_data <- read.flowSet(path = '/Users/johannesschroth/Desktop/iEMRA clustering stuff', pattern = 'Ex1.fcs')
ff <- raw_data[[1]]
vars <- flowCore::colnames(ff)[-grep('SSC|FSC|Time|Sample|Group', flowCore::colnames(ff))]
ff <- flowCore::transform(ff, flowCore::estimateLogicle(ff, channels = vars))
data <- as.data.frame(exprs(ff))
head(data)
cluster <- Rphenograph(data[,3:11])
data <- cbind(data, 'Clusters' = as.character(cluster$membership))
df <- data %>%
select(-`FSC-A`, -`SSC-A`, -`SampleID`) %>%
group_by(Clusters) %>%
summarise_all(mean) %>%
column_to_rownames(var = 'Clusters') %>%
add_column('Merged' = c('Naive', 'Naive', 'Naive', 'CM', 'CM', 'CM', 'EM', 'EMRA'),.before = T) %>%
add_column('Unmerged' = as.character(seq(1:8)), .before = T)
library(tidyverse)
df %>%
group_by(Merged) %>%
summarise_if(is.numeric(), median)
df <- data %>%
select(-`FSC-A`, -`SSC-A`, -`SampleID`) %>%
group_by(Clusters) %>%
summarise_all(mean) %>%
column_to_rownames(var = 'Clusters') %>%
add_column('Merged' = c('Naive', 'Naive', 'Naive', 'CM', 'CM', 'CM', 'EM', 'EMRA'),.before = T) %>%
add_column('Unmerged' = as.character(seq(1:8)), .before = T)
df %>%
group_by(Merged) %>%
summarise_if(is.numeric(), median)
df %>%
group_by(Merged) %>%
summarise_if(is.numeric, median)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
l <- list('1', '2')
l
l[1] <- NA
b <-- 1
b
--1
(1 + sqrt(1^2-4*2*4))/(2*2)
(1 + sqrt((1^2)-4*2*4))/(2*2)
(1 + sqrt(1^2-(4*2*4)))/(2*2)
(1 + sqrt(1^2-4*2*4))/(2*2)
sqrt(1^2-4*2*4)
sqrt(1^2-(4*2*4))
1^2
1^2-(4*2*4)
sqrt(-31)
sqrt(1^2-(4*2*4))
(1 + sqrt(1^2-4*2*4))/(2*2)
(1 + sqrt(abs(1^2-4*2*4)))/(2*2)
(1 - sqrt(abs(1^2-4*2*4)))/(2*2)
(1 + sqrt(abs(1^2-4*2*-4)))/(2*2)
(1 - sqrt(abs(1^2-4*2*-4)))/(2*2)
(1 + sqrt(1^2-4*2*4))/(2*2)
(1 + sqrt(pmax(1^2-4*2*4)))/(2*2)
1^2-4*2*4
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
new_name
is.null(new_name)
is.null(new_name)
df <- data %>%
select(-`FSC-A`, -`SSC-A`, -`SampleID`) %>%
group_by(Clusters) %>%
summarise_all(mean) %>%
column_to_rownames(var = 'Clusters') %>%
add_column('Merged' = c('Naive', 'Naive', 'Naive', 'CM', 'CM', 'CM', 'EM', 'EMRA'),.before = T) %>%
add_column('Unmerged' = as.character(seq(1:8)), .before = T)
head(data)
raw_data <- read.flowSet(path = '/Users/johannesschroth/Desktop/iEMRA clustering stuff', pattern = 'Ex1.fcs')
ff <- raw_data[[1]]
vars <- flowCore::colnames(ff)[-grep('SSC|FSC|Time|Sample|Group', flowCore::colnames(ff))]
ff <- flowCore::transform(ff, flowCore::estimateLogicle(ff, channels = vars))
data <- as.data.frame(exprs(ff))
head(data)
cluster <- Rphenograph(data[,3:11])
data <- cbind(data, 'Clusters' = as.character(cluster$membership))
df <- data %>%
select(-`FSC-A`, -`SSC-A`, -`SampleID`) %>%
group_by(Clusters) %>%
summarise_all(mean) %>%
column_to_rownames(var = 'Clusters') %>%
add_column('Merged' = c('Naive', 'Naive', 'Naive', 'CM', 'CM', 'CM', 'EM', 'EMRA'),.before = T) %>%
add_column('Unmerged' = as.character(seq(1:8)), .before = T)
head(data)
df <- data %>%
select(-`FSC-A`, -`SSC-A`, -`SampleID`) %>%
group_by(Clusters) %>%
summarise_all(mean) %>%
add_column('Merged' = c('Naive', 'Naive', 'Naive', 'CM', 'CM', 'CM', 'EM', 'EMRA'),.before = T) %>%
add_column('Unmerged' = as.character(seq(1:8)), .before = T)
head(df)
heatmaply::heatmaply(heatmaply::normalize(df)[,setdiff(colnames(df), 'Merged')])
df <- data %>%
select(-`FSC-A`, -`SSC-A`, -`SampleID`) %>%
group_by(Clusters) %>%
summarise_all(mean) %>%
add_column('Merged' = c('Naive', 'Naive', 'Naive', 'CM', 'CM', 'CM', 'EM', 'EMRA'),.before = T) %>%
add_column('Unmerged' = as.character(seq(1:8)), .before = T)
head(df)
df <- data %>%
select(-`FSC-A`, -`SSC-A`, -`SampleID`) %>%
group_by(Clusters) %>%
summarise_all(mean) %>%
add_column('Merged' = c('Naive', 'Naive', 'Naive', 'CM', 'CM', 'CM', 'EM', 'EMRA'),.before = T)
head(df)
heatmaply::heatmaply(heatmaply::normalize(df))
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
raw_data <- read.flowSet(path = '/Users/johannesschroth/Desktop/iEMRA clustering stuff', pattern = 'Ex1.fcs')
ff <- raw_data[[1]]
vars <- flowCore::colnames(ff)[-grep('SSC|FSC|Time|Sample|Group', flowCore::colnames(ff))]
ff <- flowCore::transform(ff, flowCore::estimateLogicle(ff, channels = vars))
data <- as.data.frame(exprs(ff))
clusters <- data.frame(matrix(nrow = length(data[,1])))
phenograph <- cytofkit::Rphenograph(data[,vars], k = 10)
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
Clusters
clusters
clusters[,-1]
as.data.frame(clusters[,-1])
rm(clusters)
clusters <- NULL
phenograph <- cytofkit::Rphenograph(data[,vars], k = 10)
clusters['Phenograph_Clusters'] <- as.data.frame(as.character(phenograph$membership))
clusters
clusterx <- cytofkit::ClusterX(data[,vars])
clusters['ClusterX_Clusters'] <- as.character(clusterx$cluster)
raw_data <- read.flowSet(path = '/Users/johannesschroth/Desktop/iEMRA clustering stuff', pattern = 'Ex1.fcs')
ff <- raw_data[[1]]
vars <- flowCore::colnames(ff)[-grep('SSC|FSC|Time|Sample|Group', flowCore::colnames(ff))]
ff <- flowCore::transform(ff, flowCore::estimateLogicle(ff, channels = vars))
data <- as.data.frame(exprs(ff))
clusterx <- cytofkit::ClusterX(data[,vars])
clusters['ClusterX_Clusters'] <- as.character(clusterx$cluster)
clusters['ClusterX_Clusters'] <- as.data.frame(as.character(clusterx$cluster))
clusters
clusters['ClusterX_Clusters']
unlist(clusters)
stack(clusters)
stack(clusters)
clusters <- as.data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
rm(clusters)
clusters <- as.data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters
rm(clusters)
clusters[,1] <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters <- data.frame()
clusters[,1] <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters <- matrix
clusters <- matrix()
clusters[,1] <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
rm(clusters)
clusters <- matrix()
clusters[,1] <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters
rm(clusters)
rm(clusters)
clusters[,1] <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters <- as.data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters <- data.frame(length = 400)
clusters[,1] <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters
clusters <- data.frame(matrix(nrow = 400))
clusters[,1] <- data.frame('Phenograph_Clusters'=as.character(phenograph$membership))
clusters
rm(clusters)
clusters <- data.frame(matrix(nrow = 400))
clusters[,'Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters
clusters <- data.frame(matrix(nrow = 400, d))
clusters <- data.frame(as.matrix(nrow = 400))
clusters <- data.frame(as.matrix())
clusters <- data.frame()
clusters[,'Phenograph_Clusters'] <- as.character(phenograph$membership)
## Week 1
install_course("Advanced R Programming")
### Coursera Advanced R Programming course
setwd('~/Desktop')
## Week 1
install.packages('swirl')
swirl::install_course("Advanced R Programming")
swirl::swirl()
Sys.Date()
mean(2,4,5)
mean(c(2,4,5))
swirl::submit()
boring_function('My first function!')
boring_function
swirl::submit()
my_mean(c(4,5,10))
my_mean(c(4,5,10))
swirl::submit()
swirl::submit()
remainder(5)
remainder(11,5)
remainder(11,5)
remainder(num = 5, divisor = 11)
remainder(4, div = 2)
args(remainder)
swirl::submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
swirl::submit()
telegram('hi')
swirl::submit()
mod_libs(place = 'london', adjective = 'says', noun = 'House')
swirl::submit()
swirl::submit()
'I'%p%'love'%p%'R'
'I'%p%'love'%p%'R!'
map_chr(c(5, 3, 4), int_to_string)
map_chr(c(1,2,3,4,5), gt, b = 3)
map_lgl(c(1,2,3,4,5), gt, b = 3)
map_if(c(1,2,3,4),is_even, square)
map_at(c(4,6,2,3,8), c(1,3,4), square)
map2_chr(seq(1:26), letters, paste)
map2_chr(letters, seq(1:26), paste)
library("navdata")
install.packages('navdata')
library("navdata")
devtools::install_github('navdata')
devtools::install_github("kassambara/navdata")
library("navdata")
data("phone.call2")
phone.call2
mtcars [, c(1, 3:6)] %>%  # (1)
t() %>% correlate() %>%            # (2)
shave(upper = TRUE) %>%            # (3)
stretch(na.rm = TRUE) %>%          # (4)
filter(r >= 0.998)
