shinycssloaders::withSpinner()),
column(6,
plotlyOutput('heatmap',height = '500px', width = '500px')),
hr(),
fluidRow(
selectInput('colour_col1', label = 'Colour by:', c()))))
)),
tabPanel('tSNE',
sidebarLayout(
sidebarPanel = sidebarPanel(
selectInput(inputId = 'variables_tsne', label = 'Variables', choices = c(), multiple = T),
selectInput('dimension_num_tsne', 'Number of Dimensions', c('2D', '3D')),
sliderInput('perplexity_tsne', 'Perplexity', 0,100,30),
sliderInput('theta_tsne', 'Theta', 0,1,0.5),
sliderInput('max_iter_tsne', 'Number of Iterations', 100,10000,1000),
selectInput('clustering_type_tsne', 'Select Clustering Algorithm', c('Rphenograph', 'ClusterX', 'DensVM'), multiple = T),
actionButton('submit_variables_tsne', 'Run'),
width = 3),
mainPanel = mainPanel(
fluidRow(
column(6,
plotlyOutput('tSNE_plot', height = '800px', width = '640px') %>%
shinycssloaders::withSpinner()),
column(6,
plotlyOutput('tsne_heatmap',height = '800px', width = '640px')),
hr(),
fluidRow(
selectInput('colour_col2', label = 'Colour by:', c()),
downloadButton('download_tsne_data', 'Download tSNE Data')
)
)
)
)),
tabPanel('UMAP',
sidebarLayout(
sidebarPanel = sidebarPanel(
selectInput(inputId = 'variables_umap', label = 'Variables', choices = c(), multiple = T),
selectInput('dimension_num_umap', 'Number of Dimensions', c('2D', '3D')),
sliderInput('n_neighbours_umap', 'Number of neighbours', min = 2, max = 200, value = 50),
sliderInput('min_dist_umap', 'Minimum Distance', 0.01,0.99,0.5),
selectInput('clustering_type', 'Select Clustering Algorithm', c('Rphenograph', 'ClusterX', 'DensVM'), multiple = T),
actionButton('submit_variables_umap', 'Run'),
width = 3),
mainPanel = mainPanel(
column(6,
plotlyOutput('umap_plot', height = '500px', width = '500px') %>%
shinycssloaders::withSpinner()),
# column(6,
#        plotlyOutput('heatmap',height = '500px', width = '500px')),
hr(),
fluidRow(
selectInput('colour_col3', label = 'Colour by:', c()))
)
)
)
),
tabPanel('Pseudotime',
fluidPage(
fluidRow(
plotlyOutput('pseudotime_plot', height = '500px', width = '500px') %>%
shinycssloaders::withSpinner()),
hr(),
fluidRow(
)
)
),
tabPanel('Download',
fluidPage(
bookmarkButton()
)),
##Summary Panel----
tabPanel('Summary of Project',
fluidPage(h1('Cytometry Analysis Tools'),
br(),
p(strong('This app was developed to assist in the analysis of single cell data.'))
)
)
)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
golem::add_fct('calculate_clusters')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
raw_data <- read.flowSet(path = '/Users/johannesschroth/Desktop/iEMRA clustering stuff', pattern = 'Ex1.fcs')
data <- data.frame(exprs(raw_data[[1]]))
phenograph <- cytofkit::Rphenograph(data[,3:6], k = 10)
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters <- data.frame()
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
data.frame()
data.frame(matrix(nrow = 400))
clusters <- data.frame(matrix(nrow = 400))
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters
rm(clusters)
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters['Phenograph_Clusters'] <- data.frame(as.character(phenograph$membership))
clusters <- matrix()
clusters['Phenograph_Clusters'] <- data.frame(as.character(phenograph$membership))
clusters
phenograph <- cytofkit::Rphenograph(data[,3:6], k = 10)
clusters <- matrix()
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters <- matrix()
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters <- data.frame()
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters <- c()
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters <- data.frame('Phenograph_Clusters' = as.character(phenograph$membership))
clusters
clusters <- c()
clusters <- vector()
clusters['Phenograph_Clusters'] = as.character(phenograph$membership))
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership))
phenograph$membership
phenograph$memberships
phenograph$membership
clusters <- data.frame()
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership))
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
df <- data.frame(value= sample(0:2500, 100, replace=TRUE))
df
clusters <- data.frame('P' = phenograph$membership, 'S' = daosda)
clusters <- data.frame()
clusters['Phenograph_Clusters'] <- as.character(phenograph$membership)
clusters['Phenograph_Clusters'] <- data.frame(as.character(phenograph$membership))
clusters <- matrix()
clusters['Phenograph_Clusters'] <- data.frame(as.character(phenograph$membership))
clusters
clusters$Phenograph_Clusters <- data.frame(as.character(phenograph$membership))
clusters
clusters <- matrix()
clusters <- data.frame('Phenorgraph_Clusters' = as.character(phenograph$membership))
clusters <- data.frane('Clus ' = as.character(phenograph$membership)
clusters
clusters <- matrix()
clusters <- data.frame('Phenorgraph_Clusters' = as.character(phenograph$membership))
clusters <- data.frame('Clus' = as.character(phenograph$membership)
phenograph$membership
clusters <- data.frame('Clus' = as.character(phenograph$membership)
clusters <- matrix()
clusters <- data.frame('Phenorgraph_Clusters' = as.character(phenograph$membership))
clusters <- data.frame('Clus' = as.character(phenograph$membership))
clusters
clusters <- data.frame(matrix(nrow = length(data)))
clusters
clusters[,'Phenorgraph_Clusters'] <- as.character(phenograph$membership)
clusters <- data.frame(matrix(nrow = length(data[,1])))
clusters[,'Phenorgraph_Clusters'] <- as.character(phenograph$membership)
clusters
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
cytofkit::ClusterX(data[,3:6])
cytofkit::ClusterX(data[,3:6])$cluster
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
clusterx <- cytofkit::ClusterX(data[,3:8])
print(clusterx$cluster)
library(destiny)
d <- DiffusionMap(data[,1:6])
d <- DPT(d)
plot(d)
d$Branch
d$DC1
plot(d, divide = 3)
plot(d, dcs = c(-1,-3,2))
plot(d)
d <- DiffusionMap(data[,1:6])
plot(d)
d <- DiffusionMap(data[,1:6])
d$num_cells
d <- DiffusionMap(data[,1:6])
d$num_cells
log2(guo_norm$num_cells)
factor(d$num_cell)
factor(d$num_cells)
d$
plot(d, col_by = 'num_cells')
qplot(DC1, DC2, data = d, colour = factor(num_cells)) +
scale_color_cube_helix()
ct <- as.ExpressionSet(as.data.frame(data))
ct <- as.ExpressionSet(as.data.frame(data[,3:6]))
num_cells <- gsub('^(\\d+)C.*$', '\\1', ct$Cell)
ct$num_cells <- as.integer(num_cells)
ct$Cell
golem::add_fct('calculate_dm')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
data[,1:6]
data[,1:6]
data[,1:6]
d <- DiffusionMap(data[,1:6])
d <- DPT(d)
d
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
d$DC1
d$DC2
d$DC3
data.frame(d$DC3)
data.frame('DC3' = d$DC3)
#' Launch the ShinyApp
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
#' Launch the ShinyApp
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pairs(data)
update.packages('ggplot2')
ggplot2::plotmatrix(data)
install.packages('GGally')
library('GGally')
ggpairs(data)
ggpairs(data, upper = NULL)
ggpairs(data, upper = NULL, diag = NULL)
ggpairs(data, upper = NULL, diag = NULL) + geom_point(size = 0.5)
ggpairs(data, upper = NULL, diag = NULL, lower = = aes(color = sex, alpha = 0.7))
ggpairs(data, upper = NULL, diag = NULL, lower = aes(color = sex, alpha = 0.7))
ggpairs(data, upper = NULL, diag = NULL, lower = aes(size = 0.1, alpha = 0.7))
plot <- function(data) {
p <- ggplot(data) +
geom_density2d()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, x, y) {
p <- ggplot(data, aes(x,y)) +
geom_density2d()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, x, y) {
df <- data.frame(x = x, y = y)
p <- ggplot(df, aes(x,y)) +
geom_density2d()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, x, y) {
df <- data.frame(x = x, y = y)
p <- ggplot(df, aes(x,y)) +
geom_point()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, mapping) {
p <- ggplot(df, mapping = mapping) +
geom_point()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, mapping) {
p <- ggplot(data = data, mapping = mapping) +
geom_point()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, mapping) {
p <- ggplot(data = data, mapping = mapping) +
geom_density2d()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, mapping) {
p <- ggplot(data = data, mapping = mapping) +
geom_hex()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
plot <- function(data, mapping) {
p <- ggplot(data = data, mapping = mapping) +
geom_hex() +
theme_classic()
return(p)
}
ggpairs(data, upper = NULL, diag = NULL, lower = list(continuous = plot))
ggpairs(data, upper = list(continuous = plot), diag = NULL, lower = list(continuous = plot))
plot <- function(data, mapping) {
p <- ggplot(data = data, mapping = mapping) +
geom_hex() +
theme_classic() +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
return(p)
}
ggpairs(data, upper = list(continuous = plot), diag = NULL, lower = list(continuous = plot))
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
ggplot(data, aes(CD27,CD45RA)) +
geom_hex()
ggplot(data, aes(CD27,CD45RA)) +
geom_hex(bins = 30)
ggplot(data, aes(CD27,CD45RA)) +
geom_hex(bins = 50)
ggplot(data, aes(CD27,CD45RA)) +
geom_hex(bins = 60)
ggplot(data, aes(CD27,CD45RA)) +
geom_hex(bins = 10000)
ggplot(data, aes(CD27,CD45RA)) +
geom_hex(bins = 100)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
cytofkit_GUI()
cytofkit_GUI()
golem::add_fct('calculate_heatmap')
setwd('~/Dropbox/Projects/GitHub/CytoDA')
golem::add_fct('calculate_heatmap')
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
runApp()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
runApp()
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
options("golem.app.prod" = TRUE)
CytoDA::run_app()
data$FSC.A
as.data.frame(data)
runApp()
runApp()
runApp()
grep('CD27', colnames(data))
grep('CD27', colnames(data), value = T)
runApp()
runApp()
runApp()
runApp()
data %>%
group_by('CD27')
data %>%
group_by(CD27)
dat <- CD27
data %>%
group_by(dat)
dat <- as.integer(CD27)
dat <- as.integer('CD27')
dat
dat <- as.complex('CD27')
dat <- 'CD27'
dat
data %>%
group_by(dat)
data %>%
group_by(as.expression(dat))
data %>%
group_by(dat())
data %>%
group_by(CD27)
data %>%
group_by(FSC.A)
data %>%
group_by(as.factor(dat))
runApp()
data %>%
group_by(data['CD27'])
data %>%
group_by(['CD27'])
data %>%
group_by(as.factor('CD27'))
runApp()
data.frame('Clusters' = data[,1])
head(cbind(d[,1], 'Clust' = d[,2]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(cbind(d[,1], 'Clust' = d[,2]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data[,CD27]
data[,'CD27']
runApp()
head(cbind(d[,1], 'Clust' = d[,2]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
